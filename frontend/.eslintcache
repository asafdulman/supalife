[{"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\index.js":"1","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\App.jsx":"3","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\Home.jsx":"4","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\DailyRating.jsx":"5","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\userService.js":"6","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\httpService.js":"7","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\store.js":"8","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\reducers\\userReducer.js":"9","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\actions\\userActions.js":"10","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\EditRatePreview.jsx":"11","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\DailySummary.jsx":"12","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\RateDay.jsx":"13","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\MyChart.jsx":"14","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\insightsService.js":"15","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\EditPreviewList.jsx":"16","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\Login.jsx":"17","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\SignUp.jsx":"18","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\Logout.jsx":"19","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\ProgressBar.jsx":"20","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\reducers\\progressBarReducer.js":"21","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\actions\\progressBarActions.js":"22","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\BottomBar.jsx":"23","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\motivationService.js":"24","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\StaticCategories.jsx":"25","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\StaticCategoryPreview.jsx":"26","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\ActionsPage.jsx":"27","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\categoryService.js":"28","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\ActionsAdd.jsx":"29","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\actionsService.js":"30","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\ActionPreview.jsx":"31","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\SuggestedActions.jsx":"32","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\About.jsx":"33","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\EditUserInfo.jsx":"34","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\SideBar.jsx":"35","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\storageService.js":"36","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\reducers\\botttomBarReducer.js":"37","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\actions\\bottomBarActions.js":"38","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\serviceWorkerDefault.js":"39"},{"size":592,"mtime":1617264514449,"results":"40","hashOfConfig":"41"},{"size":362,"mtime":1612957830327,"results":"42","hashOfConfig":"41"},{"size":1438,"mtime":1619423361457,"results":"43","hashOfConfig":"41"},{"size":3729,"mtime":1617523078540,"results":"44","hashOfConfig":"41"},{"size":8455,"mtime":1619433661783,"results":"45","hashOfConfig":"41"},{"size":2106,"mtime":1617521632606,"results":"46","hashOfConfig":"41"},{"size":1220,"mtime":1616847957593,"results":"47","hashOfConfig":"41"},{"size":580,"mtime":1617197718069,"results":"48","hashOfConfig":"41"},{"size":664,"mtime":1615977789793,"results":"49","hashOfConfig":"41"},{"size":940,"mtime":1617529250512,"results":"50","hashOfConfig":"41"},{"size":4094,"mtime":1619422868623,"results":"51","hashOfConfig":"41"},{"size":1663,"mtime":1617201490378,"results":"52","hashOfConfig":"41"},{"size":5003,"mtime":1619423191773,"results":"53","hashOfConfig":"41"},{"size":2861,"mtime":1619422908286,"results":"54","hashOfConfig":"41"},{"size":3685,"mtime":1619432600194,"results":"55","hashOfConfig":"41"},{"size":439,"mtime":1614082107888,"results":"56","hashOfConfig":"41"},{"size":2366,"mtime":1619422892806,"results":"57","hashOfConfig":"41"},{"size":3444,"mtime":1617561702001,"results":"58","hashOfConfig":"41"},{"size":546,"mtime":1619422973170,"results":"59","hashOfConfig":"41"},{"size":875,"mtime":1619422984276,"results":"60","hashOfConfig":"41"},{"size":914,"mtime":1614241049736,"results":"61","hashOfConfig":"41"},{"size":734,"mtime":1614241011047,"results":"62","hashOfConfig":"41"},{"size":3244,"mtime":1619434142168,"results":"63","hashOfConfig":"41"},{"size":2095,"mtime":1614678335570,"results":"64","hashOfConfig":"41"},{"size":2460,"mtime":1617614492566,"results":"65","hashOfConfig":"41"},{"size":895,"mtime":1619422942810,"results":"66","hashOfConfig":"41"},{"size":9890,"mtime":1619433943629,"results":"67","hashOfConfig":"41"},{"size":632,"mtime":1615811421062,"results":"68","hashOfConfig":"41"},{"size":4276,"mtime":1619422749466,"results":"69","hashOfConfig":"41"},{"size":7150,"mtime":1617519265646,"results":"70","hashOfConfig":"41"},{"size":4848,"mtime":1619422742106,"results":"71","hashOfConfig":"41"},{"size":5112,"mtime":1619433907842,"results":"72","hashOfConfig":"41"},{"size":1646,"mtime":1617450409998,"results":"73","hashOfConfig":"41"},{"size":2850,"mtime":1617522415514,"results":"74","hashOfConfig":"41"},{"size":1006,"mtime":1616488081873,"results":"75","hashOfConfig":"41"},{"size":415,"mtime":1617202729654,"results":"76","hashOfConfig":"41"},{"size":466,"mtime":1617197693115,"results":"77","hashOfConfig":"41"},{"size":268,"mtime":1617197520668,"results":"78","hashOfConfig":"41"},{"size":5227,"mtime":1617203629625,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"9fajne",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\index.js",[],["172","173"],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\reportWebVitals.js",[],["174","175"],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\App.jsx",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\Home.jsx",["176","177","178","179"],"import { useDispatch, useSelector } from 'react-redux'\r\nimport { useEffect, useState } from 'react'\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Login } from \"../cmps/Login\";\r\nimport { Logout } from '../cmps/Logout';\r\nimport logo from '../assets/img/logo.png'\r\nimport { motivationService } from '../services/motivationService';\r\nimport { SideBar } from '../cmps/SideBar';\r\nimport { showBottomBar } from '../store/actions/bottomBarActions';\r\n\r\nexport function Home() {\r\n\r\n    const [todayDate, setTodayDate] = useState('')\r\n    const [isDayRated, setIsDayRated] = useState('')\r\n    const [isBarOpen, setIsBarOpen] = useState(false)\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(showBottomBar())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        isCategoryOnDate()\r\n    }, [loggedInUser])\r\n\r\n    //dev 6023c5ecf8814f14258b09a4\r\n\r\n    //production 602a3dd07a43b706dce84a8f\r\n\r\n    const isUserHaveCategories = () => {\r\n        const res = loggedInUser.categories.length ? true : false;\r\n        return res\r\n    }\r\n\r\n    const isCategoryOnDate = () => {\r\n        let date = new Date()\r\n        date = `${date.getFullYear()}-${('0' + (date.getMonth() + 1)).slice(-2)}-${('0' + date.getDate()).slice(-2)}`;\r\n        const dayArr = date.split('-')\r\n        date = `${dayArr[1]}/${dayArr[2]}/${dayArr[0]}`\r\n        setTodayDate(date)\r\n        const dayToCheck = loggedInUser?.dailyRating.find(day => day.date === date)\r\n        if (!dayToCheck) return false\r\n        const isTodayRated = dayToCheck?.rating.some(day => day.rate)\r\n        setIsDayRated(isTodayRated)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <i onClick={() => { setIsBarOpen(!isBarOpen) }} className=\"fas hamburger-menu fa-cogs\"></i>\r\n            {isBarOpen && <div onClick={() => { setIsBarOpen(!isBarOpen) }} className=\"side-bar-overlay\"></div>}\r\n            <SideBar isBarOpen={isBarOpen} setIsBarOpen={setIsBarOpen} />\r\n            <img className=\"logo\" src={logo} alt=\"logo\" />\r\n            {!loggedInUser && <Login />}\r\n            {/* {loggedInUser && <Logout />} */}\r\n            {loggedInUser &&\r\n                <div className=\"home-box\">\r\n                    <h1>Hey {loggedInUser.userName}</h1>\r\n                    <hr />\r\n                    <div className=\"sentence-box\">\r\n                        <p>{motivationService.getSentence()}</p>\r\n                    </div>\r\n                    {loggedInUser && !isUserHaveCategories() &&\r\n                        <div className=\"add-categories-home-box\">\r\n                            <p>You have no categories yet</p>\r\n                            <p>Is it a good time to add a few?</p>\r\n                            <NavLink to=\"/categories\">GO</NavLink>\r\n                        </div>}\r\n                    {loggedInUser.userName === 'Guest' && <div className=\"home-guest-box\">\r\n                        <h4>Dear Guest</h4>\r\n                        <p>You are now in a demo mode. Feel free to play and check things out.</p>\r\n                        <p>Rate your day, see our insights, add/edit actions, and more.</p>\r\n                        <p>All the data would be deleted once you leave the app.</p>\r\n                    </div>}\r\n                    {loggedInUser && !isDayRated &&\r\n                        <div className={loggedInUser.categories.length ? \"go-to-rate-home-box\" : \"go-to-rate-home-box-not-visiable\"}>\r\n                            <p>You didn't rate this day yet. Might be a good time to do so.</p>\r\n                            <NavLink to=\"/ratethisday\">GO</NavLink>\r\n                        </div>}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\DailyRating.jsx",["180","181","182","183"],"import { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect, useState } from 'react'\r\nimport { MyChart } from \"../cmps/MyChart\";\r\nimport { insightService } from '../services/insightsService'\r\nimport { SuggestedActions } from '../cmps/SuggestedActions';\r\nimport { hideBottomBar, showBottomBar } from '../store/actions/bottomBarActions';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nexport function DailyRating() {\r\n    const [pickedDate, setPickedDate] = useState()\r\n    const [datePicker, setDatePicker] = useState()\r\n    const [isByCategory, setIsByCategory] = useState()\r\n    const [selectedCategory, setSelectedCategory] = useState()\r\n    const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\r\n    const [categoryData, setCategoryData] = useState()\r\n    const [isSuggestedModalOpen, setIsSuggestedModalOpen] = useState(false)\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        setInitialDate()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (loggedInUser) getWeekAvgInsight()\r\n        setCategoryData(getCategoryData())\r\n        getCategoryInsight()\r\n    }, [pickedDate])\r\n\r\n    useEffect(() => {\r\n        setCategoryData(getCategoryData())\r\n        getCategoryInsight()\r\n    }, [selectedCategory])\r\n\r\n    const setInitialDate = () => {\r\n        let date = new Date()\r\n        date = `${date.getFullYear()}-${('0' + (date.getMonth() + 1)).slice(-2)}-${('0' + date.getDate()).slice(-2)}`;\r\n        date = loggedInUser?.userName === 'Guest' ? '2021-04-04' : date\r\n        setDatePicker(date)\r\n        const dayArr = date.split('-')\r\n        date = `${dayArr[1]}/${dayArr[2]}/${dayArr[0]}`\r\n        setPickedDate(date)\r\n    }\r\n\r\n    const onPickDate = (ev) => {\r\n        ev.preventDefault()\r\n        setDatePicker(ev.target.value)\r\n        const dayArr = ev.target.value.split('-')\r\n        const date = `${dayArr[1]}/${dayArr[2]}/${dayArr[0]}`\r\n        setPickedDate(date)\r\n    }\r\n\r\n    const getWeekAvgInsight = () => {\r\n        const dailyAverage = loggedInUser.dailyRating.map(day => {\r\n            const sum = day.rating.reduce((acc, value) => {\r\n                value.rate = (typeof value.rate === 'string') ? +value.rate : value.rate\r\n                return acc + value.rate\r\n            }, 0)\r\n            const avg = sum / day.rating.length\r\n            return { date: day.date, avg }\r\n        })\r\n        const idxEnd = loggedInUser.dailyRating.findIndex(day => day.date === pickedDate)\r\n        let idxStart = idxEnd - 6\r\n        idxStart = idxStart < 0 ? 0 : idxStart\r\n        const ratingdaysRange = dailyAverage.slice(idxStart, idxEnd + 1)\r\n        const totalAvg = ratingdaysRange.reduce((acc, day) => acc + day.avg, 0) / ratingdaysRange.length;\r\n        return insightService.getWeeklyAvg(totalAvg)\r\n    }\r\n\r\n    const getInsight = () => {\r\n        const dailyAverage = loggedInUser.dailyRating.map(day => {\r\n            const sum = day.rating.reduce((acc, value) => {\r\n                return acc + value.rate\r\n            }, 0)\r\n            const avg = sum / day.rating.length\r\n            return { date: day.date, avg }\r\n        })\r\n        const idxEnd = loggedInUser.dailyRating.findIndex(day => day.date === pickedDate)\r\n        let idxStart = idxEnd - 3\r\n        idxStart = idxStart < 0 ? 0 : idxStart\r\n        if (idxEnd < 0) return;\r\n        const ratingdaysRange = dailyAverage.slice(idxStart, idxEnd)\r\n        const totalAvg = ratingdaysRange.reduce((acc, day) => acc + day.avg, 0) / ratingdaysRange.length;\r\n        const chosenDay = loggedInUser.dailyRating.find(day => day.date === pickedDate)\r\n        const chosenDateAvg = chosenDay.rating.reduce((acc, day) => acc + day.rate, 0) / chosenDay.rating.length\r\n        return insightService.getGeneralInsight(totalAvg, chosenDateAvg)\r\n    }\r\n\r\n    const onSelectCategory = (category) => {\r\n        setSelectedCategory(category)\r\n    }\r\n\r\n    const getCategoryData = () => {\r\n        const dataToShow = []\r\n        const dayIndex = loggedInUser?.dailyRating.findIndex(day => day.date === pickedDate)\r\n        const rangedDates = loggedInUser?.dailyRating.slice(dayIndex - 3, dayIndex + 1)\r\n        rangedDates?.map(day => {\r\n            const res = day.rating.find(dayCategory => dayCategory.category === selectedCategory)\r\n            if (res) dataToShow.push(res.rate)\r\n        })\r\n        return dataToShow\r\n    }\r\n\r\n    const onByDate = () => {\r\n        setIsByCategory(false)\r\n        setSelectedCategory('')\r\n    }\r\n\r\n    const getCategoryInsight = () => {\r\n        var rangedDates;\r\n        var sum = 0;\r\n        var count = 0;\r\n        var avg = 0\r\n        if (selectedCategory && pickedDate) {\r\n            const dayIndex = loggedInUser?.dailyRating.findIndex(day => day.date === pickedDate)\r\n            if (!dayIndex) {\r\n                rangedDates = loggedInUser?.dailyRating[0]\r\n            } else if (dayIndex === 1) {\r\n                rangedDates = loggedInUser?.dailyRating.slice(dayIndex - 1, dayIndex + 1)\r\n            } else if (dayIndex === 2) {\r\n                rangedDates = loggedInUser?.dailyRating.slice(dayIndex - 2, dayIndex + 1)\r\n            } else {\r\n                rangedDates = loggedInUser?.dailyRating.slice(dayIndex - 3, dayIndex + 1)\r\n            }\r\n            if (rangedDates.length > 1) {\r\n                rangedDates.forEach(day => {\r\n                    const chosenCategory = day.rating.find(category => category.category === selectedCategory)\r\n                    if (chosenCategory && chosenCategory.rate) count++\r\n                    sum += chosenCategory?.rate\r\n                })\r\n                avg = sum / count\r\n            } \r\n            return insightService.getInsightPerCategory(selectedCategory, avg)\r\n        }\r\n    }\r\n\r\n    const toggleSuggestedModal = (action) => {\r\n        if (action === 'open') {\r\n            setIsSuggestedModalOpen(true)\r\n        } else {\r\n            setIsSuggestedModalOpen(false)\r\n            dispatch(showBottomBar())\r\n        }\r\n    }\r\n\r\n    const onBlobClick = () => {\r\n        setIsSuggestedModalOpen(!isSuggestedModalOpen)\r\n        dispatch(hideBottomBar())\r\n    }\r\n\r\n    return (\r\n        <div className=\"daily-rating-box\">\r\n            <h1 className=\"daily-rating-heading\">Daily Stats</h1>\r\n            {loggedInUser?.userName === 'Guest' && <i onClick={() => { setIsInfoModalOpen(!isInfoModalOpen) }} className=\"far info-icon-daily-rating fa-question-circle\"></i>}\r\n            <div className={isInfoModalOpen ? \"explanation-daily-rating-box-open\" : \"explanation-daily-rating-box-close\"}>\r\n                <p>Since you are in a guest mode, the data you see in the past days (beginning of April) is hard-coded. Feel free to <NavLink to=\"/signup\">sign up</NavLink> and enter your own life data.</p>\r\n            </div>\r\n            <input className=\"daily-rating-date-input\" type=\"date\" value={datePicker} onChange={(ev) => { onPickDate(ev) }} />\r\n            <div className=\"daily-rating-btns-box\">\r\n                <button onClick={() => { setIsByCategory(!isByCategory) }}>By Category</button>\r\n                <button onClick={() => { onByDate() }}>By Date</button>\r\n            </div>\r\n            {loggedInUser && isByCategory && <div>\r\n                {loggedInUser.categories.map(category => <button onClick={() => { onSelectCategory(category) }} key={category} className=\"stats-category-btn\">{category}</button>)}\r\n            </div>}\r\n            {loggedInUser && <MyChart dailyRating={loggedInUser.dailyRating} pickedDate={pickedDate} loggedInUser={loggedInUser} selectedCategory={selectedCategory} categoryData={categoryData} />}\r\n            <div className=\"daily-rating-insights-box\">\r\n                {loggedInUser && getInsight() && <p className=\"general-insight-box\">{getInsight()}</p>}\r\n                {loggedInUser && isByCategory && getCategoryInsight() && <div className=\"category-insight-box\">\r\n                    <div onClick={() => { onBlobClick() }} className=\"blob green\"></div>\r\n                    <p >{getCategoryInsight()}</p>\r\n                </div>}\r\n                {loggedInUser && <p className={getWeekAvgInsight() ? \"weekly-category-insight-box\" : \"display-none\"}>{getWeekAvgInsight()}</p>}\r\n            </div>\r\n            {isSuggestedModalOpen && <SuggestedActions isSuggestedModalOpen={isSuggestedModalOpen} toggleSuggestedModal={toggleSuggestedModal} selectedCategory={selectedCategory} />}\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\userService.js",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\httpService.js",["184"],"import Axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV !== 'development'\r\n    ? '/api'\r\n    : '//localhost:3001/api'\r\n// const BASE_URL = process.env.NODE_ENV === 'production'\r\n//     ? '/api'\r\n//     : '//localhost:3001/api'\r\n\r\n//https://gimzu.herokuapp.com/#/\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        if (err.response && err.response.status === 401) {\r\n            window.location.assign('/#/login');\r\n        }\r\n        throw err;\r\n    }\r\n}","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\store.js",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\reducers\\userReducer.js",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\actions\\userActions.js",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\EditRatePreview.jsx",["185","186"],"import { useState, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { decreaseProgressBar, increaseProgressBar } from '../store/actions/progressBarActions';\r\n\r\nexport function EditRatePreview({ category, modifyDataToGeneralForm, loggedInUser, pickedDate }) {\r\n    const dispatch = useDispatch()\r\n    const [rate, setRate] = useState('')\r\n    const [isCategoryRated, setIsCategoryRated] = useState()\r\n    const [catDailyDescription, setCatDailyDescription] = useState('')\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    useEffect(() => {\r\n        checkCategoryRatedBack()\r\n    }, [])\r\n    useEffect(() => {\r\n        checkCategoryRatedBack()\r\n    }, [pickedDate])\r\n\r\n    const onSaveCategory = async ev => {\r\n        ev.preventDefault()\r\n        const dataToForm = { category, rate, catDailyDescription }\r\n        modifyDataToGeneralForm(dataToForm)\r\n        setIsOpen(!isOpen)\r\n        if (isCategoryRated) {\r\n            if (!rate) {\r\n                dispatch(decreaseProgressBar())\r\n                setIsCategoryRated(false)\r\n            }\r\n        } else {\r\n            if (rate) {\r\n                dispatch(increaseProgressBar())\r\n                setIsCategoryRated(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkCategoryRatedBack = () => {\r\n        const day = loggedInUser.dailyRating.find(day => day.date === pickedDate)\r\n        if (day) {\r\n            const dayCategory = day.rating.find(dailyCategory => dailyCategory.category === category)\r\n            if (dayCategory) {\r\n                dayCategory.rate ? setIsCategoryRated(true) : setIsCategoryRated(false)\r\n            } else {\r\n                setIsCategoryRated(false)\r\n            }\r\n        } else {\r\n            setIsCategoryRated(false)\r\n        }\r\n    }\r\n\r\n    const onSetRate = (ev, rate) => {\r\n        ev.preventDefault()\r\n        setRate(rate)\r\n    }\r\n\r\n    const onSetCatDailyDescription = (ev) => {\r\n        ev.preventDefault()\r\n        setCatDailyDescription('')\r\n    }\r\n\r\n    return (\r\n        <div className={isCategoryRated ? \"edit-rate-box-rated\" : \"edit-rate-box-not-rated\"}>\r\n            <h2 className={isCategoryRated ? 'category-heading-rated' : 'category-heading-not-rated'} onClick={() => { setIsOpen(!isOpen) }} >{category}</h2>\r\n            <div className={isOpen ? \"edit-rate-modal-open\" : \"edit-rate-modal-close\"}>\r\n                {isOpen && <form className=\"edit-rate-form\">\r\n                    <span onClick={() => { setRate('') }} className=\"undo-rate-modal-btn\"><i className=\"fas fa-undo-alt\"></i></span>\r\n                    <span className=\"close-rate-modal-btn\" onClick={() => { setIsOpen(!isOpen) }}><i className=\"far fa-window-close\"></i></span>\r\n                    <div className=\"edit-rate-btns-box\">\r\n                        <button className={rate === '1' ? '' : 'clicked-rate-btn'} onClick={(ev) => { onSetRate(ev, '1') }}>1</button>\r\n                        <button className={rate === '2' ? '' : 'clicked-rate-btn'} onClick={(ev) => { onSetRate(ev, '2') }}>2</button>\r\n                        <button className={rate === '3' ? '' : 'clicked-rate-btn'} onClick={(ev) => { onSetRate(ev, '3') }}>3</button>\r\n                        <button className={rate === '4' ? '' : 'clicked-rate-btn'} onClick={(ev) => { onSetRate(ev, '4') }}>4</button>\r\n                        <button className={rate === '5' ? '' : 'clicked-rate-btn'} onClick={(ev) => { onSetRate(ev, '5') }}>5</button>\r\n                    </div>\r\n                    <div className=\"edit-rate-input-box\">\r\n                        <input className=\"edit-rate-input\" type=\"text\" placeholder=\"Thoughts about the day\" value={catDailyDescription} onChange={(ev) => { setCatDailyDescription(ev.target.value) }} />\r\n                        <button onClick={(ev) => { onSetCatDailyDescription(ev) }} className=\"delete-form-btn\" ><i className=\"far fa-trash-alt\"></i></button>\r\n                    </div>\r\n                    <button className=\"save-rating-btn\" onClick={(ev) => { onSaveCategory(ev) }}>Save</button>\r\n                </form>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\DailySummary.jsx",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\RateDay.jsx",["187","188","189"],"import { updateUser } from \"../store/actions/userActions\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useEffect, useState } from 'react'\r\nimport { DailySummary } from \"../cmps/DailySummary\";\r\nimport { userService } from \"../services/userService\";\r\nimport { EditPreviewList } from \"../cmps/EditPreviewList\";\r\nimport Confetti from 'react-confetti'\r\nimport { ProgressBar } from \"../cmps/ProgressBar\";\r\nimport { setTotalCategories, setCompletedCategories } from \"../store/actions/progressBarActions\";\r\nimport { Slide } from '@material-ui/core'\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport function RateDay() {\r\n\r\n    const dispatch = useDispatch()\r\n    const [dailyCategories, setDailyCategories] = useState([])\r\n    const [isErrorMesageModalOpen, setIsMeesageModalOpen] = useState()\r\n    const [dailySummary, setDailySummary] = useState([])\r\n    const [pickedDate, setPickedDate] = useState()\r\n    const [isConf, setisConf] = useState(false)\r\n    const [isMsgModalOpen, setIsMsgModalOpen] = useState(false)\r\n    const [datePicker, setDatePicker] = useState()\r\n\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser)\r\n\r\n    useEffect(() => {\r\n        setInitialDate()\r\n    }, [])\r\n    useEffect(() => {\r\n        const numberOfCategories = loggedInUser?.categories.length\r\n        dispatch(setTotalCategories(numberOfCategories))\r\n    }, [loggedInUser])\r\n\r\n    useEffect(() => {\r\n        getCompletedCategories()\r\n    }, [pickedDate])\r\n\r\n    const setInitialDate = () => {\r\n        let date = new Date()\r\n        date = `${date.getFullYear()}-${('0' + (date.getMonth() + 1)).slice(-2)}-${('0' + date.getDate()).slice(-2)}`;\r\n        date = loggedInUser?.userName === 'Guest' ? '2021-04-04' : date\r\n        setDatePicker(date)\r\n        const dayArr = date.split('-')\r\n        date = `${dayArr[1]}/${dayArr[2]}/${dayArr[0]}`\r\n        setPickedDate(date)\r\n    }\r\n\r\n    const modifyDataToGeneralForm = async (categoryInfo) => {\r\n        const idx = dailyCategories.findIndex(daily => daily.category === categoryInfo.category)\r\n        if (idx >= 0) {\r\n            dailyCategories.splice(idx, 1, categoryInfo)\r\n            setDailyCategories([...dailyCategories])\r\n        } else {\r\n            setDailyCategories([...dailyCategories, categoryInfo])\r\n        }\r\n    }\r\n\r\n    const modifyDailySummary = (summary) => {\r\n        setDailySummary(summary)\r\n    }\r\n\r\n    const onAddDailyData = async () => {\r\n        if (!loggedInUser) return;\r\n        if (!dailyCategories.length) {\r\n            setIsMeesageModalOpen(true)\r\n            setTimeout(() => {\r\n                setIsMeesageModalOpen(false)\r\n            }, 3000);\r\n            return;\r\n        }\r\n        setisConf(true)\r\n        setTimeout(() => {\r\n            setisConf(false)\r\n        }, 4000);\r\n        setTimeout(() => {\r\n            setIsMsgModalOpen(true)\r\n        }, 4000);\r\n        setTimeout(() => {\r\n            setIsMsgModalOpen(false)\r\n        }, 8000);\r\n        const data = {\r\n            dailySummary,\r\n            dailyCategories\r\n        }\r\n        if (loggedInUser.userName === 'Guest') return;\r\n        const user = await userService.updateDailyData(loggedInUser, data, pickedDate)\r\n        dispatch(updateUser(user))\r\n    }\r\n\r\n    const onPickDate = (ev) => {\r\n        ev.preventDefault()\r\n        setDatePicker(ev.target.value)\r\n        const dayArr = ev.target.value.split('-')\r\n        const date = `${dayArr[1]}/${dayArr[2]}/${dayArr[0]}`\r\n        setPickedDate(date)\r\n    }\r\n\r\n    const getCompletedCategories = () => {\r\n        let count = 0\r\n        const day = loggedInUser?.dailyRating.find(day => day.date === pickedDate)\r\n        if (day) {\r\n            day.rating.forEach(day => {\r\n                if (day.rate) count++\r\n            })\r\n        }\r\n        dispatch(setCompletedCategories(count))\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"rate-day-box\">\r\n            <Slide in={isErrorMesageModalOpen}>\r\n                <div className=\"rate-day-fill-category-message-modal\">Please fill at least one category.</div>\r\n            </Slide>\r\n            <Slide in={isMsgModalOpen}>\r\n                <div className=\"rate-day-send-form-message-modal\"><p>Great! Now go to the <NavLink to=\"dailyrating\">Stats</NavLink> page and see your graph.</p> </div>\r\n            </Slide>\r\n\r\n            <h1 className=\"rate-day-heading\">Rate This Day!</h1>\r\n            <input className=\"date-box\" type=\"date\" defaultValue={datePicker} value={datePicker} onChange={(ev) => { onPickDate(ev) }} />\r\n            <DailySummary modifyDailySummary={modifyDailySummary} />\r\n            <ProgressBar />\r\n            {loggedInUser && <EditPreviewList modifyDataToGeneralForm={modifyDataToGeneralForm} pickedDate={pickedDate} categories={loggedInUser.categories} loggedInUser={loggedInUser} />}\r\n            <button className=\"send-rating-btn\" onClick={() => { onAddDailyData() }}>DONE</button>\r\n            {isConf && <Confetti height={1000} gravity={0.2} />}\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\MyChart.jsx",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\insightsService.js",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\EditPreviewList.jsx",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\Login.jsx",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\SignUp.jsx",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\Logout.jsx",["190"],"import { logout } from \"../store/actions/userActions\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\n\r\nexport function Logout() {\r\n\r\n    let history = useHistory();\r\n    const dispatch = useDispatch()\r\n    const onLogout = () => {\r\n        dispatch(logout())\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <div className=\"logout-box\">\r\n            <button className=\"logout-btn\" onClick={() => { onLogout() }}>Logout</button>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\ProgressBar.jsx",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\reducers\\progressBarReducer.js",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\actions\\progressBarActions.js",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\BottomBar.jsx",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\motivationService.js",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\StaticCategories.jsx",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\StaticCategoryPreview.jsx",["191"],"import { useEffect, useState } from \"react\"\r\n\r\nexport function StaticCategoryPreview({ category, loggedInUser, updateCategoryInUser }) {\r\n\r\n    const [isCategory, setIsCategory] = useState()\r\n\r\n    useEffect(() => {\r\n        isCategoryInUser()\r\n    }, [loggedInUser])\r\n\r\n    const updateCategory = () => {\r\n        if (!loggedInUser) return;\r\n        updateCategoryInUser(category)\r\n        setIsCategory(!isCategory)\r\n    }\r\n\r\n    const isCategoryInUser = () => {\r\n        const isCategoryExists = loggedInUser?.categories.some(cat => cat === category)\r\n        setIsCategory(isCategoryExists)\r\n    }\r\n\r\n    return (\r\n        <div onClick={() => { updateCategory() }} className={isCategory ? 'category-exists' : 'category-not-exists'}>\r\n            <p>{category} </p>\r\n            {isCategory && <span className=\"added-ribbon\"><i className=\"fas fa-star\"></i></span>}\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\ActionsPage.jsx",["192","193"],"import { useDispatch, useSelector } from 'react-redux'\r\nimport { useEffect, useState } from 'react'\r\nimport { ActionPreview } from '../cmps/ActionPreview'\r\nimport { ActionsAdd } from '../cmps/ActionsAdd'\r\nimport { updateUser } from '../store/actions/userActions'\r\nimport { actionsService } from '../services/actionsService'\r\nimport { Slide } from '@material-ui/core';\r\nimport { DragDropContext } from 'react-beautiful-dnd'\r\nimport { Droppable } from 'react-beautiful-dnd'\r\nimport { userService } from '../services/userService'\r\nimport { hideBottomBar, showBottomBar } from '../store/actions/bottomBarActions'\r\n\r\nexport function ActionsPage() {\r\n\r\n    const [filterBy, setFilterBy] = useState({ title: '', category: 'All' })\r\n    const [isRemoveMessageOpen, setIsRemoveMessageOpen] = useState(false)\r\n    const [isRemoveMsgModal, setIsRemoveMsgModal] = useState(false)\r\n    const [isDoneMsgModal, setIsDoneMsgModal] = useState(false)\r\n    const [selectedAction, setSelectedAction] = useState()\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        userCategoryAction()\r\n        showActionsStats()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        showActionsStats()\r\n    }, [loggedInUser])\r\n\r\n    const onFocus = () => {\r\n        dispatch(hideBottomBar())\r\n    }\r\n    const onBlur = () => {\r\n        dispatch(showBottomBar())\r\n    }\r\n\r\n    const onAddAction = async (action) => {\r\n        if (loggedInUser.userName === 'Guest') {\r\n            action.category = action.category ? action.category : 'Family'\r\n            action.isDone = false\r\n            action.createdAt = new Date()\r\n            action.timeStamp = Date.now()\r\n            loggedInUser.actions = [action, ...loggedInUser.actions]\r\n            const user = { ...loggedInUser }\r\n            dispatch(updateUser(user))\r\n            return;\r\n        }\r\n        const user = await actionsService.addAction(loggedInUser, action)\r\n        dispatch(updateUser(user))\r\n    }\r\n\r\n    const onIsDone = async (action) => {\r\n        setSelectedAction(action)\r\n        if (loggedInUser.userName === 'Guest') {\r\n            const actionToEdit = loggedInUser.actions.find(userAction => userAction.timeStamp === action.timeStamp)\r\n            actionToEdit.isDone = !actionToEdit.isDone\r\n            const user = { ...loggedInUser }\r\n            dispatch(updateUser(user))\r\n        } else {\r\n            const user = await actionsService.updateActionDone(loggedInUser, action)\r\n            dispatch(updateUser(user))\r\n        }\r\n        setIsDoneMsgModal(true)\r\n        setTimeout(() => {\r\n            setIsDoneMsgModal(false)\r\n        }, 2500);\r\n    }\r\n\r\n    const showDoneMessage = (action) => {\r\n        if (loggedInUser?.userName === 'Guest') {\r\n            return action?.isDone ? <p className=\"done-action-message-modal\">Well done! \"{action?.title}\" completed.</p> : <p className=\"done-action-message-modal\">\"{action?.title}\" is now undone.</p>\r\n        } else {\r\n            return !action?.isDone ? <p className=\"done-action-message-modal\">Well done! \"{action?.title}\" completed.</p> : <p className=\"done-action-message-modal\">\"{action?.title}\" is now undone.</p>\r\n        }\r\n    }\r\n\r\n    const onEditAction = async (originalAction, editedAction) => {\r\n        if (loggedInUser.userName === 'Guest') {\r\n            const actionToEdit = loggedInUser.actions.find(userAction => userAction.timeStamp === originalAction.timeStamp)\r\n            actionToEdit.title = editedAction.title ? editedAction.title : originalAction.title;\r\n            actionToEdit.category = editedAction.category ? editedAction.category : originalAction.category;\r\n            actionToEdit.todoTime = editedAction.todoTime ? editedAction.todoTime : originalAction.todoTime;\r\n            const user = { ...loggedInUser }\r\n            dispatch(updateUser(user))\r\n        } else {\r\n            const user = await actionsService.updateActionEdit(loggedInUser, originalAction, editedAction)\r\n            dispatch(updateUser(user))\r\n        }\r\n\r\n    }\r\n\r\n    const userCategoryAction = () => {\r\n        const actions = loggedInUser?.actions?.map(action => action.category)\r\n        var res = actions?.filter((category, index) => actions.indexOf(category) === index)\r\n        if (res) res = ['All', ...res]\r\n        return res?.map(category => <option key={category}>{category}</option>)\r\n    }\r\n\r\n    const onRemoveAction = async (action) => {\r\n        setIsRemoveMessageOpen(true)\r\n        setSelectedAction(action)\r\n    }\r\n\r\n    const onRemoveAfterConfirmation = async () => {\r\n        if (loggedInUser.userName === 'Guest') {\r\n            loggedInUser.actions = loggedInUser.actions.filter(userAction => userAction.timeStamp !== selectedAction.timeStamp)\r\n            const user = { ...loggedInUser }\r\n            if (user) setIsRemoveMessageOpen(false)\r\n            dispatch(updateUser(user))\r\n        } else {\r\n            const user = await actionsService.removeAction(loggedInUser, selectedAction)\r\n            if (user) setIsRemoveMessageOpen(false)\r\n            dispatch(updateUser(user))\r\n        }\r\n        setTimeout(() => {\r\n            setIsRemoveMsgModal(true)\r\n        }, 500);\r\n        setTimeout(() => {\r\n            setIsRemoveMsgModal(false)\r\n        }, 2500);\r\n    }\r\n\r\n    const showActionsStats = () => {\r\n        const totalActions = loggedInUser?.actions?.length;\r\n        const doneActions = loggedInUser?.actions?.reduce((acc, action) => {\r\n            return acc = action.isDone ? ++acc : acc\r\n        }, 0)\r\n        if (!doneActions && !totalActions) return '0 / 0'\r\n        return `${doneActions} / ${totalActions}`\r\n    }\r\n\r\n    const onDragEnd = async (e) => {\r\n        const { destination, source } = e\r\n        if (!destination) return;\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n        const newActions = [...loggedInUser.actions]\r\n        const action = newActions.splice(source.index, 1)\r\n        newActions.splice(destination.index, 0, action[0])\r\n        loggedInUser.actions = newActions\r\n        if (loggedInUser.userName === 'Guest') {\r\n            const user = { ...loggedInUser }\r\n            dispatch(updateUser(user))\r\n        } else {\r\n            const user = await userService.updateUserActions(loggedInUser)\r\n            dispatch(updateUser(user))\r\n        }\r\n\r\n    }\r\n\r\n    const onFilterActions = (ev) => {\r\n        const name = ev.target.name\r\n        setFilterBy({ ...filterBy, [name]: ev.target.value })\r\n    }\r\n\r\n    const actionsToShow = () => {\r\n        const userActions = loggedInUser?.actions\r\n        let filteredActions = filterBy.title ? userActions.filter(action => action.title.toLowerCase().includes(filterBy.title.toLowerCase())) : userActions\r\n        if (filterBy.category) {\r\n            if (filterBy.category === 'All') {\r\n                return filteredActions\r\n            } else {\r\n                filteredActions = filteredActions.filter(action => action.category === filterBy.category)\r\n                return filteredActions\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"actions-page-box\">\r\n            <h1 className=\"actions-heading\">Actions</h1>\r\n            <div className=\"action-page-top-box\">\r\n                <ActionsAdd onAddAction={onAddAction} />\r\n                <div className=\"filter-inputs-box\">\r\n                    <input autoComplete=\"off\" onFocus={() => { onFocus() }} onBlur={() => { onBlur() }} value={filterBy.title} className=\"actions-filter-title-input\" name=\"title\" onChange={(ev) => { setFilterBy({ ...filterBy, title: ev.target.value }) }} type=\"text\" placeholder=\"Search action\" />\r\n                    <select name=\"category\" className=\"actions-filter-category-input\" onChange={(ev) => { onFilterActions(ev) }}>\r\n                        {userCategoryAction()}\r\n                    </select>\r\n                </div>\r\n                <div className=\"action-recap-box\">\r\n                    <p>{showActionsStats()}</p>\r\n                </div>\r\n\r\n            </div>\r\n            <Slide in={isDoneMsgModal}>\r\n                {showDoneMessage(selectedAction)}\r\n            </Slide>\r\n            <Slide in={isRemoveMessageOpen}>\r\n                <div className=\"remove-action-confirmation-box\">\r\n                    <p>Are you sure you want to delete this action?</p>\r\n                    <button className=\"remove-action-confirm-btn\" onClick={() => { onRemoveAfterConfirmation() }}>Delete</button>\r\n                    <button className=\"remove-action-cancel-btn\" onClick={() => { setIsRemoveMessageOpen(false) }}>I regret</button>\r\n                </div>\r\n            </Slide>\r\n            <Slide in={isRemoveMsgModal}>\r\n                <p className=\"removed-action-message-modal\">{selectedAction?.title} was successfuly removed.</p>\r\n            </Slide>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Droppable droppableId={'1'}>\r\n                    {(provided, snapshot) => (\r\n                        <div className={(snapshot.isDraggingOver) ? \"list-wrapper-dragging-over\" : \"list-wrapper\"}\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}>\r\n                            {loggedInUser && actionsToShow().map((action, index) => <ActionPreview index={index} key={action.timeStamp} onRemoveAction={onRemoveAction} onEditAction={onEditAction} onIsDone={onIsDone} action={action} />)}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                    {/* {loggedInUser && actionsToShow().map(action => <ActionPreview key={action.timeStamp} onRemoveAction={onRemoveAction} onEditAction={onEditAction} onIsDone={onIsDone} action={action} />)} */}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n}\r\n\r\n","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\categoryService.js",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\ActionsAdd.jsx",["194"],"import { useEffect, useState } from \"react\"\r\nimport { categoryService } from \"../services/categoryService\"\r\nimport { Slide, Grow } from '@material-ui/core'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { hideBottomBar, showBottomBar } from \"../store/actions/bottomBarActions\"\r\n\r\nexport function ActionsAdd({ onAddAction }) {\r\n    const [actionToAdd, setActionToAdd] = useState({ title: '', category: 'Family', todoTime: '' })\r\n    const [isAddActionModal, setIsAddActionModal] = useState(false)\r\n    const [isErrorMsgModal, setIsErrorMsgModal] = useState(false)\r\n    const [isCompletedMsgModal, setIsCompletedMsgModal] = useState(false)\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser)\r\n    const categories = categoryService.getStaticCategories()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        setActionToAdd({ ...actionToAdd, todoTime: setInitialDate() })\r\n    }, [])\r\n\r\n    const onFocus = () => {\r\n        dispatch(hideBottomBar())\r\n    }\r\n    const onBlur = () => {\r\n        dispatch(showBottomBar())\r\n    }\r\n\r\n    const setInitialDate = () => {\r\n        let date = new Date()\r\n        date = `${date.getFullYear()}-${('0' + (date.getMonth() + 1)).slice(-2)}-${('0' + date.getDate()).slice(-2)}`;\r\n        date = loggedInUser?.userName === 'Guest' ? '2021-04-04' : date\r\n        return date\r\n    }\r\n\r\n    const handleChange = (ev) => {\r\n        const name = ev.target.name\r\n        const value = ev.target.value\r\n        setActionToAdd({ ...actionToAdd, [name]: value })\r\n    }\r\n\r\n    const onSendAction = (ev) => {\r\n        ev.preventDefault()\r\n        if (!loggedInUser) return;\r\n        if (!actionToAdd || !actionToAdd.title || !actionToAdd.category) {\r\n            setIsErrorMsgModal(true)\r\n            setTimeout(() => {\r\n                setIsErrorMsgModal(false)\r\n            }, 3000);\r\n            return;\r\n        }\r\n        const clearedAction = { title: '', category: 'Family', todoTime: '' }\r\n        onAddAction(actionToAdd)\r\n        setActionToAdd(clearedAction)\r\n        setIsAddActionModal(!isAddActionModal)\r\n        setTimeout(() => {\r\n            setIsCompletedMsgModal(true)\r\n        }, 300);\r\n        setTimeout(() => {\r\n            setIsCompletedMsgModal(false)\r\n        }, 3000);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Slide in={isCompletedMsgModal}>\r\n                <div className=\"add-action-message-modal\">\r\n                    New Action Added Successfuly\r\n                    </div>\r\n            </Slide>\r\n            <Slide in={isErrorMsgModal}>\r\n                <div className=\"add-action-error-message-modal\">\r\n                    You have some missing feilds.\r\n                    </div>\r\n            </Slide>\r\n            <i onClick={() => { setIsAddActionModal(!isAddActionModal) }} className=\"fas fa-plus-circle add-action-list-btn fa-2x\"></i>\r\n            {isAddActionModal && <div onClick={() => { setIsAddActionModal(!isAddActionModal) }} className=\"add-action-modal-overlay\"></div>}\r\n            <Grow in={isAddActionModal}>\r\n                <form className=\"add-action-box\">\r\n                    <i onClick={() => { setIsAddActionModal(false) }} className=\"fas fa-times close-add-action-modal\"></i>\r\n                    <h1>Add a new action</h1>\r\n                    <input autoComplete=\"off\" className=\"add-action-title-input\" onFocus={() => { onFocus() }} onBlur={() => { onBlur() }} value={actionToAdd.title} name=\"title\" placeholder=\"What needs to be done\" type=\"text\" onChange={(ev) => { handleChange(ev) }} />\r\n                    <select className=\"select-category-action-add\" value={actionToAdd.category} onChange={(ev) => { handleChange(ev) }} name=\"category\">\r\n                        {categories.map(category => <option key={category} selected={category === 'Family' ? 'selected' : ''} className=\"option-action-add\" value={category}>{category}</option>)}\r\n                    </select>\r\n                    <input className=\"add-action-date-input\" value={actionToAdd.todoTime} name=\"todoTime\" type=\"date\" onChange={(ev) => { handleChange(ev) }} />\r\n                    <button className=\"add-action-save-btn\" onClick={(ev) => { onSendAction(ev) }}>Go</button>\r\n                </form>\r\n            </Grow>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\actionsService.js",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\ActionPreview.jsx",["195"],"import { Zoom } from \"@material-ui/core\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { categoryService } from \"../services/categoryService\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { hideBottomBar, showBottomBar } from \"../store/actions/bottomBarActions\";\r\nimport { Draggable } from 'react-beautiful-dnd'\r\n\r\nexport function ActionPreview({ index, action, onIsDone, onEditAction, onRemoveAction }) {\r\n    const [isModalOpen, setIsModalOpen] = useState(false)\r\n    const [EditedActionData, setEditedActionData] = useState()\r\n    const [editedTitle, setEditedTitle] = useState(action.title)\r\n    const [datePicker, setDatePicker] = useState()\r\n    const categories = categoryService.getStaticCategories()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        setInitialDate()\r\n    }, [])\r\n    \r\n    const onFocus = () => {\r\n        dispatch(hideBottomBar())\r\n    }\r\n    const onBlur = () => {\r\n        dispatch(showBottomBar())\r\n    }\r\n\r\n    const setInitialDate = () => {\r\n        let date = new Date()\r\n        date = `${date.getFullYear()}-${('0' + (date.getMonth() + 1)).slice(-2)}-${('0' + date.getDate()).slice(-2)}`;\r\n        setDatePicker(date)\r\n    }\r\n\r\n    const handleChange = (ev) => {\r\n        const name = ev.target.name\r\n        const value = ev.target.value\r\n        setEditedActionData({ ...EditedActionData, [name]: value })\r\n        if (name === 'title') {\r\n            setEditedTitle(value)\r\n        }\r\n        if (name === 'todoTime') {\r\n            setDatePicker(value)\r\n        }\r\n    }\r\n\r\n    const onEditActionPreview = (ev) => {\r\n        ev.preventDefault()\r\n        onEditAction(action, EditedActionData)\r\n        setIsModalOpen(false)\r\n    }\r\n\r\n    return (\r\n        <Draggable  draggableId={action.title} index={index}>\r\n            {(provided, snapshot) => (\r\n                <div\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}\r\n                    className={(snapshot.isDragging) ? 'action-preview-box-dragging' : 'action-preview-box'} >\r\n                    <div className={action.isDone ? 'action-box-done' : 'action-box-not-done'}>\r\n                        <h3 className=\"action-preview-heading\">{action.title}</h3>\r\n                        <p className=\"action-category\">{action.category}</p>\r\n                        <p className=\"action-todo-time\">{action.todoTime}</p>\r\n                        <div className=\"action-preview-btns-box\">\r\n                            <button className={action.isDone ? 'undone-action-btn' : 'done-action-btn'} onClick={() => { onIsDone(action) }}><i className=\"fas fa-check\"></i></button>\r\n                            <button className=\"edit-action-btn\" onClick={() => { setIsModalOpen(!isModalOpen) }}><i className=\"fas fa-pen\"></i></button>\r\n                            <button className=\"remove-action-btn\" onClick={() => { onRemoveAction(action) }}><i className=\"far fa-trash-alt\"></i></button>\r\n                        </div>\r\n                        <Zoom in={isModalOpen}>\r\n                            <form className=\"edit-action-box\">\r\n                                <i onClick={() => { setIsModalOpen(false) }} className=\"fas fa-times close-add-action-modal\"></i>\r\n                                <input onFocus={() => { onFocus() }} onBlur={() => { onBlur() }} className=\"edit-action-input-title\" name=\"title\" onChange={(ev) => { handleChange(ev) }} value={editedTitle} placeholder=\"Edit action title\" type=\"text\" />\r\n                                <select className=\"edit-action-input-category\" onChange={(ev) => { handleChange(ev) }} name=\"category\">\r\n                                    {categories.map(category => <option key={category} selected={action.category === category ? 'selected' : ''} value={category}>{category}</option>)}\r\n                                </select>\r\n                                <input value={action?.todoTime ? action.todoTime : datePicker} className=\"edit-action-input-date\" name=\"todoTime\" onChange={(ev) => { handleChange(ev) }} type=\"date\" />\r\n                                <button className=\"edit-action-save-btn\" onClick={(ev) => { onEditActionPreview(ev) }}>Save</button>\r\n                            </form>\r\n                        </Zoom>\r\n                    </div>\r\n\r\n                </div>)\r\n\r\n            }\r\n        </Draggable>\r\n    )\r\n}\r\n\r\n{/* <Draggable draggableId={employee._id} index={index}>\r\n    {(provided, snapshot) => (\r\n        <div\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n            className={(snapshot.isDragging) ? 'employee-preview-box-dragging' : 'employee-preview-box'} >\r\n            <p>{employee.lastName}, {employee.firstName}</p>\r\n\r\n        </div>)\r\n\r\n    }\r\n</Draggable> */}","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\SuggestedActions.jsx",["196"],"import { useEffect, useState } from \"react\"\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { actionsService } from \"../services/actionsService\"\r\nimport { updateUser } from \"../store/actions/userActions\"\r\nimport { Slide, Zoom } from '@material-ui/core';\r\nimport { showBottomBar } from \"../store/actions/bottomBarActions\";\r\n\r\nexport function SuggestedActions({ selectedCategory, toggleSuggestedModal, isSuggestedModalOpen }) {\r\n\r\n    const [randomActions, setRandomActions] = useState()\r\n    const [selectedAction, setSelectedAction] = useState()\r\n    const [selectedActionButton, setSelectedActionButton] = useState()\r\n    const [datePicker, setDatePicker] = useState()\r\n    const [isDateModalOpen, setIsDateModalOpen] = useState(false)\r\n    const [isModalActionAdd, setIsModalActionAdd] = useState(false)\r\n    const [isErrorMsgModal, setIsErrorMsgModal] = useState(false)\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        getSuggestedAction(selectedCategory)\r\n        setInitialDate()\r\n    }, [])\r\n\r\n    const setInitialDate = () => {\r\n        let date = new Date()\r\n        date = `${date.getFullYear()}-${('0' + (date.getMonth() + 1)).slice(-2)}-${('0' + date.getDate()).slice(-2)}`;\r\n        date = loggedInUser?.userName === 'Guest' ? '2021-04-04' : date\r\n        setDatePicker(date)\r\n    }\r\n    const getSuggestedAction = (category) => {\r\n        const actions = actionsService.suggestedActions()\r\n        var actionsByCategory = actions.filter(action => action.category === category)\r\n        const actionsToDisplay = [];\r\n        for (var i = 0; i < 3; i++) {\r\n            const actionToAdd = actionsByCategory[Math.floor(Math.random() * actionsByCategory.length)]\r\n            actionsToDisplay.push(actionToAdd)\r\n            actionsByCategory = actionsByCategory.filter(action => action.title !== actionToAdd.title)\r\n        }\r\n        setRandomActions(actionsToDisplay)\r\n    }\r\n\r\n    const onSelectSuggestedAction = (action, button) => {\r\n        setSelectedActionButton(button)\r\n        setSelectedAction(action)\r\n        setIsDateModalOpen(true)\r\n    }\r\n\r\n    const onSaveAction = async (action) => {\r\n        if (!action || !datePicker) {\r\n            setIsErrorMsgModal(true)\r\n            setTimeout(() => {\r\n                setIsErrorMsgModal(false)\r\n            }, 2000);\r\n            return;\r\n        }\r\n        action.todoTime = datePicker\r\n        if (loggedInUser.userName === 'Guest') {\r\n            action.isDone = false\r\n            action.createdAt = new Date()\r\n            action.timeStamp = Date.now()\r\n            loggedInUser.actions = [action, ...loggedInUser.actions]\r\n            const user = { ...loggedInUser }\r\n            dispatch(updateUser(user))\r\n        } else {\r\n            const user = await actionsService.addAction(loggedInUser, action)\r\n            dispatch(updateUser(user))\r\n        }\r\n        setIsModalActionAdd(true)\r\n        setTimeout(() => {\r\n            setIsModalActionAdd(false)\r\n        }, 2000);\r\n        setTimeout(() => {\r\n            toggleSuggestedModal('close')\r\n        }, 3000);\r\n        dispatch(showBottomBar())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Slide in={isModalActionAdd}>\r\n                <div className=\"added-action-message-modal\">\r\n                    <p>\"{selectedAction?.title}\" Action Added Successfuly</p>\r\n                </div>\r\n            </Slide>\r\n            <Slide in={isErrorMsgModal}>\r\n                <div className=\"error-message-modal\">\r\n                    Please add a due date.\r\n                    </div>\r\n            </Slide>\r\n\r\n            <Zoom in={isSuggestedModalOpen}>\r\n                <div className=\"suggested-actions-box\">\r\n                    <i onClick={() => { toggleSuggestedModal('close') }} className=\"fas fa-2x fa-times close-add-suggested-action-modal\"></i>\r\n                    <h1 className=\"suggested-actions-heading\">Might be a good time to add a new action?</h1>\r\n                    <p className=\"suggested-actions-category-box\">{selectedCategory}</p>\r\n                    <div className=\"suggested-actions-btns-box\">\r\n\r\n                        {randomActions?.map((randomAction, index) => <button\r\n                            key={index}\r\n                            className={selectedActionButton === index ? \"suggested-actions-btn-clicked\" : 'suggested-actions-btn'}\r\n                            onClick={() => { onSelectSuggestedAction(randomAction, index) }}>\r\n                            {randomActions && randomAction.title}</button>)}\r\n\r\n                    </div>\r\n                    {isDateModalOpen && <div className=\"date-and-save-btn-box\">\r\n                        <input className=\"suggested-actions-date-input\" value={datePicker} onChange={(ev) => { setDatePicker(ev.target.value) }} id=\"date\" type=\"date\" />\r\n                        <button className=\"suggested-actions-save-btn\" onClick={() => { onSaveAction(selectedAction) }}>Save</button>\r\n                    </div>}\r\n                </div>\r\n            </Zoom>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\About.jsx",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\pages\\EditUserInfo.jsx",["197"],"import { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { userService } from '../services/userService'\r\nimport { updateUser } from '../store/actions/userActions'\r\nimport { Slide } from '@material-ui/core'\r\n\r\nexport function EditUserInfo() {\r\n    const [userData, setUserData] = useState(null)\r\n    const [isErrorMessageOpen, setIsErrorMessageOpen] = useState(false)\r\n    const [isSuccessMessageOpen, setIsSuccessMessageOpen] = useState(false)\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        setUserData({ userName: loggedInUser?.userName, age: loggedInUser?.age })\r\n    }, [])\r\n\r\n    const onHandleChange = (ev) => {\r\n        const name = ev.target.name\r\n        const value = name === 'age' ? +ev.target.value : ev.target.value\r\n        setUserData({ ...userData, [name]: value })\r\n    }\r\n\r\n    const onSave = async (ev) => {\r\n        ev.preventDefault()\r\n        if (loggedInUser.userName === 'Guest') return;\r\n        if (userData.userName === loggedInUser.userName && userData.age === loggedInUser.age) {\r\n            setIsErrorMessageOpen(true)\r\n            setTimeout(() => {\r\n                setIsErrorMessageOpen(false)\r\n            }, 2000);\r\n            return;\r\n        }\r\n        const user = await userService.updateUserCreds(loggedInUser, userData.userName, userData.age)\r\n        dispatch(updateUser(user))\r\n        setIsSuccessMessageOpen(true)\r\n        setTimeout(() => {\r\n            setIsSuccessMessageOpen(false)\r\n        }, 2000);\r\n    }\r\n\r\n    return (\r\n        <div className=\"edit-details-box\">\r\n            <Slide in={isErrorMessageOpen}>\r\n                <div className=\"same-creds-message-modal\">No changes were made!</div>\r\n            </Slide>\r\n            <Slide in={isSuccessMessageOpen}>\r\n                <div className=\"user-creds-message-modal\">User Details Updated Successfully.</div>\r\n            </Slide>\r\n            <h1 className=\"edit-details-heading\">Edit Details</h1>\r\n            {loggedInUser.userName === 'Guest' && <p className=\"edit-user-info-guest\">Since you are a visiting guest, you won't be able to edit any details.</p>}\r\n            <form className=\"edit-details-form-box\">\r\n                <input onChange={(ev) => { onHandleChange(ev) }} value={userData?.userName} name=\"userName\" type=\"text\" placeholder=\"User Name\" />\r\n                {/* <input onChange={(ev) => { onHandleChange(ev) }} value={userData?.password} name=\"password\" type=\"password\" placeholder=\"Password\" /> */}\r\n                <input onChange={(ev) => { onHandleChange(ev) }} value={userData?.age} name=\"age\" type=\"number\" placeholder=\"Age\" />\r\n                <button onClick={(ev) => { onSave(ev) }}> Save Changes</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\cmps\\SideBar.jsx",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\services\\storageService.js",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\reducers\\botttomBarReducer.js",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\store\\actions\\bottomBarActions.js",[],"C:\\Users\\asafd\\Desktop\\life\\life\\frontend\\src\\serviceWorkerDefault.js",[],{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"198","replacedBy":"202"},{"ruleId":"200","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":5,"column":10,"nodeType":"206","messageId":"207","endLine":5,"endColumn":16},{"ruleId":"204","severity":1,"message":"208","line":13,"column":12,"nodeType":"206","messageId":"207","endLine":13,"endColumn":21},{"ruleId":"209","severity":1,"message":"210","line":22,"column":8,"nodeType":"211","endLine":22,"endColumn":10,"suggestions":"212"},{"ruleId":"209","severity":1,"message":"213","line":26,"column":8,"nodeType":"211","endLine":26,"endColumn":22,"suggestions":"214"},{"ruleId":"209","severity":1,"message":"215","line":23,"column":8,"nodeType":"211","endLine":23,"endColumn":10,"suggestions":"216"},{"ruleId":"209","severity":1,"message":"217","line":29,"column":8,"nodeType":"211","endLine":29,"endColumn":20,"suggestions":"218"},{"ruleId":"209","severity":1,"message":"219","line":34,"column":8,"nodeType":"211","endLine":34,"endColumn":26,"suggestions":"220"},{"ruleId":"221","severity":1,"message":"222","line":98,"column":30,"nodeType":"223","messageId":"224","endLine":98,"endColumn":32},{"ruleId":"225","severity":1,"message":"226","line":17,"column":1,"nodeType":"227","endLine":30,"endColumn":2},{"ruleId":"209","severity":1,"message":"228","line":14,"column":8,"nodeType":"211","endLine":14,"endColumn":10,"suggestions":"229"},{"ruleId":"209","severity":1,"message":"228","line":17,"column":8,"nodeType":"211","endLine":17,"endColumn":20,"suggestions":"230"},{"ruleId":"209","severity":1,"message":"215","line":28,"column":8,"nodeType":"211","endLine":28,"endColumn":10,"suggestions":"231"},{"ruleId":"209","severity":1,"message":"210","line":32,"column":8,"nodeType":"211","endLine":32,"endColumn":22,"suggestions":"232"},{"ruleId":"209","severity":1,"message":"233","line":36,"column":8,"nodeType":"211","endLine":36,"endColumn":20,"suggestions":"234"},{"ruleId":"204","severity":1,"message":"235","line":4,"column":10,"nodeType":"206","messageId":"207","endLine":4,"endColumn":18},{"ruleId":"209","severity":1,"message":"236","line":9,"column":8,"nodeType":"211","endLine":9,"endColumn":22,"suggestions":"237"},{"ruleId":"209","severity":1,"message":"238","line":26,"column":8,"nodeType":"211","endLine":26,"endColumn":10,"suggestions":"239"},{"ruleId":"209","severity":1,"message":"240","line":30,"column":8,"nodeType":"211","endLine":30,"endColumn":22,"suggestions":"241"},{"ruleId":"209","severity":1,"message":"242","line":19,"column":8,"nodeType":"211","endLine":19,"endColumn":10,"suggestions":"243"},{"ruleId":"244","severity":1,"message":"245","line":88,"column":1,"nodeType":"246","messageId":"247","endLine":100,"endColumn":17},{"ruleId":"209","severity":1,"message":"248","line":23,"column":8,"nodeType":"211","endLine":23,"endColumn":10,"suggestions":"249"},{"ruleId":"209","severity":1,"message":"250","line":16,"column":8,"nodeType":"211","endLine":16,"endColumn":10,"suggestions":"251"},"no-native-reassign",["252"],"no-negated-in-lhs",["253"],["252"],["253"],"no-unused-vars","'Logout' is defined but never used.","Identifier","unusedVar","'todayDate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["254"],"React Hook useEffect has a missing dependency: 'isCategoryOnDate'. Either include it or remove the dependency array.",["255"],"React Hook useEffect has a missing dependency: 'setInitialDate'. Either include it or remove the dependency array.",["256"],"React Hook useEffect has missing dependencies: 'getCategoryData', 'getCategoryInsight', 'getWeekAvgInsight', and 'loggedInUser'. Either include them or remove the dependency array.",["257"],"React Hook useEffect has missing dependencies: 'getCategoryData' and 'getCategoryInsight'. Either include them or remove the dependency array.",["258"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'checkCategoryRatedBack'. Either include it or remove the dependency array.",["259"],["260"],["261"],["262"],"React Hook useEffect has a missing dependency: 'getCompletedCategories'. Either include it or remove the dependency array.",["263"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'isCategoryInUser'. Either include it or remove the dependency array.",["264"],"React Hook useEffect has missing dependencies: 'showActionsStats' and 'userCategoryAction'. Either include them or remove the dependency array.",["265"],"React Hook useEffect has a missing dependency: 'showActionsStats'. Either include it or remove the dependency array.",["266"],"React Hook useEffect has missing dependencies: 'actionToAdd' and 'setInitialDate'. Either include them or remove the dependency array. You can also do a functional update 'setActionToAdd(a => ...)' if you only need 'actionToAdd' in the 'setActionToAdd' call.",["267"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","React Hook useEffect has missing dependencies: 'selectedCategory' and 'setInitialDate'. Either include them or remove the dependency array.",["268"],"React Hook useEffect has missing dependencies: 'loggedInUser?.age' and 'loggedInUser?.userName'. Either include them or remove the dependency array.",["269"],"no-global-assign","no-unsafe-negation",{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"274","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},"Update the dependencies array to be: [dispatch]",{"range":"301","text":"302"},"Update the dependencies array to be: [isCategoryOnDate, loggedInUser]",{"range":"303","text":"304"},"Update the dependencies array to be: [setInitialDate]",{"range":"305","text":"306"},"Update the dependencies array to be: [getCategoryData, getCategoryInsight, getWeekAvgInsight, loggedInUser, pickedDate]",{"range":"307","text":"308"},"Update the dependencies array to be: [getCategoryData, getCategoryInsight, selectedCategory]",{"range":"309","text":"310"},"Update the dependencies array to be: [checkCategoryRatedBack]",{"range":"311","text":"312"},"Update the dependencies array to be: [checkCategoryRatedBack, pickedDate]",{"range":"313","text":"314"},{"range":"315","text":"306"},"Update the dependencies array to be: [dispatch, loggedInUser]",{"range":"316","text":"317"},"Update the dependencies array to be: [getCompletedCategories, pickedDate]",{"range":"318","text":"319"},"Update the dependencies array to be: [isCategoryInUser, loggedInUser]",{"range":"320","text":"321"},"Update the dependencies array to be: [showActionsStats, userCategoryAction]",{"range":"322","text":"323"},"Update the dependencies array to be: [loggedInUser, showActionsStats]",{"range":"324","text":"325"},"Update the dependencies array to be: [actionToAdd, setInitialDate]",{"range":"326","text":"327"},"Update the dependencies array to be: [selectedCategory, setInitialDate]",{"range":"328","text":"329"},"Update the dependencies array to be: [loggedInUser?.age, loggedInUser?.userName]",{"range":"330","text":"331"},[826,828],"[dispatch]",[891,905],"[isCategoryOnDate, loggedInUser]",[1031,1033],"[setInitialDate]",[1189,1201],"[getCategoryData, getCategoryInsight, getWeekAvgInsight, loggedInUser, pickedDate]",[1310,1328],"[getCategoryData, getCategoryInsight, selectedCategory]",[614,616],"[checkCategoryRatedBack]",[683,695],"[checkCategoryRatedBack, pickedDate]",[1229,1231],[1390,1404],"[dispatch, loggedInUser]",[1473,1485],"[getCompletedCategories, pickedDate]",[252,266],"[isCategoryInUser, loggedInUser]",[1199,1201],"[showActionsStats, userCategoryAction]",[1264,1278],"[loggedInUser, showActionsStats]",[939,941],"[actionToAdd, setInitialDate]",[1109,1111],"[selectedCategory, setInitialDate]",[726,728],"[loggedInUser?.age, loggedInUser?.userName]"]